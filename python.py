import streamlit as st
import pandas as pd
import numpy as np
import numpy_financial as npf # FIX: S·ª≠ d·ª•ng numpy_financial ƒë·ªÉ t√≠nh NPV v√† IRR
import json
import time

# Th∆∞ vi·ªán Gemini
from google.genai import Client
from google.genai.errors import APIError

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh Gi√° Ph∆∞∆°ng √Ån Kinh Doanh üìä",
    layout="wide"
)

# --- H√†m g·ªçi API Gemini ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu c√≥ c·∫•u tr√∫c ---
def extract_financial_parameters(text_data, api_key):
    """S·ª≠ d·ª•ng Gemini API ƒë·ªÉ tr√≠ch xu·∫•t c√°c th√¥ng s·ªë t√†i ch√≠nh t·ª´ vƒÉn b·∫£n."""
    
    # Chu·∫©n b·ªã schema JSON cho ƒë·∫ßu ra
    response_schema = {
        "type": "OBJECT",
        "properties": {
            "V·ªën ƒë·∫ßu t∆∞": {"type": "number", "description": "T·ªïng v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (VNƒê)."},
            "D√≤ng ƒë·ªùi d·ª± √°n": {"type": "integer", "description": "S·ªë nƒÉm ho·∫°t ƒë·ªông c·ªßa d·ª± √°n."},
            "Doanh thu": {"type": "number", "description": "Doanh thu thu·∫ßn h√†ng nƒÉm (VNƒê)."},
            "Chi ph√≠": {"type": "number", "description": "T·ªïng chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (VNƒê, ch∆∞a bao g·ªìm Kh·∫•u hao n·∫øu c√≥)."},
            "WACC": {"type": "number", "description": "Chi ph√≠ s·ª≠ d·ª•ng v·ªën b√¨nh qu√¢n (WACC), nh·∫≠p d∆∞·ªõi d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 0.13)."},
            "Thu·∫ø": {"type": "number", "description": "Thu·∫ø su·∫•t Thu nh·∫≠p Doanh nghi·ªáp (TNDN), nh·∫≠p d∆∞·ªõi d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 0.20)."}
        },
        "required": ["V·ªën ƒë·∫ßu t∆∞", "D√≤ng ƒë·ªùi d·ª± √°n", "Doanh thu", "Chi ph√≠", "WACC", "Thu·∫ø"]
    }

    system_prompt = (
        "B·∫°n l√† tr·ª£ l√Ω ph√¢n t√≠ch t√†i ch√≠nh. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ƒë·ªçc ph∆∞∆°ng √°n kinh doanh do ng∆∞·ªùi d√πng cung c·∫•p "
        "v√† tr√≠ch xu·∫•t ch√≠nh x√°c 6 th√¥ng s·ªë t√†i ch√≠nh v√†o c·∫•u tr√∫c JSON cho tr∆∞·ªõc. "
        "H√£y chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c gi√° tr·ªã ti·ªÅn t·ªá t·ª´ T·ª∑, Tri·ªáu... sang ƒë∆°n v·ªã VNƒê v√† WACC/Thu·∫ø sang d·∫°ng th·∫≠p ph√¢n."
    )
    
    user_query = f"Ph∆∞∆°ng √°n kinh doanh:\n---\n{text_data}\n---\nH√£y tr√≠ch xu·∫•t 6 th√¥ng s·ªë t√†i ch√≠nh ch√≠nh x√°c nh·∫•t."

    try:
        # S·ª≠ d·ª•ng exponential backoff cho API call
        client = Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'
        
        # Th·ª≠ l·∫°i t·ªëi ƒëa 3 l·∫ßn
        for attempt in range(3):
            try:
                response = client.models.generate_content(
                    model=model_name,
                    contents=user_query,
                    config={
                        "system_instruction": system_prompt,
                        "response_mime_type": "application/json",
                        "response_schema": response_schema
                    }
                )
                
                # Tr√≠ch xu·∫•t v√† ph√¢n t√≠ch JSON
                json_string = response.text
                return json.loads(json_string)

            except APIError as e:
                if attempt < 2:
                    st.warning(f"L·ªói API (l·∫ßn {attempt + 1}). ƒêang th·ª≠ l·∫°i sau {2 ** attempt} gi√¢y...")
                    time.sleep(2 ** attempt)
                else:
                    raise e

    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API sau 3 l·∫ßn th·ª≠. Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}")
        return None
    except json.JSONDecodeError:
        st.error("AI kh√¥ng th·ªÉ t·∫°o ra c·∫•u tr√∫c JSON h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu ƒë·∫ßu v√†o ho·∫∑c prompt c·ªßa AI.")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh tr√≠ch xu·∫•t: {e}")
        return None
    return None

# --- H√†m t√≠nh to√°n D√≤ng ti·ªÅn v√† Ch·ªâ s·ªë hi·ªáu qu·∫£ ---
@st.cache_data
def calculate_project_metrics(params):
    """
    T√≠nh to√°n b·∫£ng d√≤ng ti·ªÅn v√† c√°c ch·ªâ s·ªë NPV, IRR, PP, DPP.
    S·ª≠ d·ª•ng numpy-financial (npf) cho c√°c t√≠nh to√°n t√†i ch√≠nh.
    """
    
    # 1. Tr√≠ch xu·∫•t th√¥ng s·ªë
    C0 = -params['V·ªën ƒë·∫ßu t∆∞']
    N = int(params['D√≤ng ƒë·ªùi d·ª± √°n'])
    WACC = params['WACC']
    
    # T√≠nh to√°n D√≤ng ti·ªÅn thu·∫ßn h√†ng nƒÉm (CF_t)
    DT = params['Doanh thu']
    CP = params['Chi ph√≠']
    Thue_suat = params['Thu·∫ø']
    
    EBIT = DT - CP
    Tax_amount = EBIT * Thue_suat
    CF_annually_after_tax = EBIT - Tax_amount
    
    # 2. X√¢y d·ª±ng B·∫£ng D√≤ng ti·ªÅn (Cash Flows)
    years = list(range(0, N + 1))
    cash_flows = [C0] + [CF_annually_after_tax] * N
    
    df_cashflow = pd.DataFrame({
        'NƒÉm': years,
        'D√≤ng ti·ªÅn thu·∫ßn (CF)': cash_flows,
        'H·ªá s·ªë chi·∫øt kh·∫•u': [1] + [1 / ((1 + WACC)**t) for t in range(1, N + 1)],
        'D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)': [C0] + [CF_annually_after_tax / ((1 + WACC)**t) for t in range(1, N + 1)]
    })
    
    # 3. T√≠nh to√°n c√°c ch·ªâ s·ªë
    cash_flows_for_npv_irr = [C0] + [CF_annually_after_tax] * N
    
    # a) NPV (Net Present Value)
    # npf.npv ch·ªâ t√≠nh gi√° tr·ªã hi·ªán t·∫°i c·ªßa c√°c d√≤ng ti·ªÅn t∆∞∆°ng lai. C0 ƒë∆∞·ª£c c·ªông v√†o sau.
    NPV = npf.npv(WACC, cash_flows_for_npv_irr[1:]) + cash_flows_for_npv_irr[0] 
    
    # b) IRR (Internal Rate of Return)
    try:
        IRR = npf.irr(cash_flows_for_npv_irr)
    except ValueError:
        IRR = np.nan # NaN n·∫øu IRR kh√¥ng th·ªÉ t√≠nh to√°n (th∆∞·ªùng x·∫£y ra khi kh√¥ng c√≥ s·ª± thay ƒë·ªïi d·∫•u)

    # c) PP (Simple Payback Period)
    cumulative_cf = 0
    PP = float('inf')
    for year, cf in enumerate(cash_flows_for_npv_irr[1:], 1):
        cumulative_cf += cf
        if cumulative_cf >= abs(C0):
            PP = year - 1 + (abs(C0) - (cumulative_cf - cf)) / cf
            break
        if year == N:
            PP = float('inf')
    
    # d) DPP (Discounted Payback Period)
    cumulative_discounted_cf = 0
    DPP = float('inf')
    discounted_C0 = abs(C0) # V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu kh√¥ng chi·∫øt kh·∫•u
    
    for year in range(1, N + 1):
        dcf = df_cashflow[df_cashflow['NƒÉm'] == year]['D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)'].iloc[0]
        cumulative_discounted_cf += dcf
        if cumulative_discounted_cf >= discounted_C0:
            DPP = year - 1 + (discounted_C0 - (cumulative_discounted_cf - dcf)) / dcf
            break
        if year == N:
            DPP = float('inf')

    # Tr·∫£ v·ªÅ k·∫øt qu·∫£
    results = {
        'NPV': NPV,
        'IRR': IRR,
        'PP': PP,
        'DPP': DPP,
        'WACC': WACC
    }
    
    return df_cashflow, results

# --- H√†m AI Ph√¢n t√≠ch Ch·ªâ s·ªë ---
def get_ai_analysis(results, df_cashflow, api_key):
    """S·ª≠ d·ª•ng Gemini ƒë·ªÉ ph√¢n t√≠ch c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n."""
    
    system_prompt = (
        "B·∫°n l√† m·ªôt chuy√™n gia th·∫©m ƒë·ªãnh d·ª± √°n v√† ph√¢n t√≠ch t√†i ch√≠nh. "
        "D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n (NPV, IRR, PP, DPP), h√£y ƒë∆∞a ra ƒë√°nh gi√° chuy√™n s√¢u v√† kh√°ch quan "
        "v·ªÅ t√≠nh kh·∫£ thi v√† r·ªßi ro c·ªßa d·ª± √°n. So s√°nh IRR v·ªõi WACC (13%). "
        "S·ª≠ d·ª•ng 3-4 ƒëo·∫°n vƒÉn. N·∫øu NPV √¢m, h√£y gi·∫£i th√≠ch t·∫°i sao d·ª± √°n kh√¥ng kh·∫£ thi."
    )
    
    # Chu·∫©n b·ªã d·ªØ li·ªáu cho AI
    analysis_data = f"""
    C√°c ch·ªâ s·ªë hi·ªáu qu·∫£:
    - V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (C0): {df_cashflow['D√≤ng ti·ªÅn thu·∫ßn (CF)'].iloc[0]:,.0f} VNƒê
    - WACC (Su·∫•t chi·∫øt kh·∫•u): {results['WACC'] * 100:.2f}%
    - NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng): {results['NPV']:,.0f} VNƒê
    - IRR (T·ª∑ su·∫•t ho√†n v·ªën n·ªôi b·ªô): {results['IRR'] * 100:.2f}%
    - PP (Th·ªùi gian ho√†n v·ªën ƒë∆°n gi·∫£n): {results['PP']:.2f} nƒÉm
    - DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u): {results['DPP']:.2f} nƒÉm
    
    B·∫£ng D√≤ng ti·ªÅn (chi ti·∫øt):
    {df_cashflow.to_markdown(index=False)}
    """
    
    user_query = f"Ph√¢n t√≠ch d·ª± √°n v·ªõi c√°c d·ªØ li·ªáu sau:\n{analysis_data}"

    try:
        client = Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'
        
        response = client.models.generate_content(
            model=model_name,
            contents=user_query,
            config={"system_instruction": system_prompt}
        )
        return response.text
        
    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API. Chi ti·∫øt l·ªói: {e}")
        return "Kh√¥ng th·ªÉ th·ª±c hi·ªán ph√¢n t√≠ch AI do l·ªói k·∫øt n·ªëi ho·∫∑c c·∫•u h√¨nh API."
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh ph√¢n t√≠ch: {e}"


# --- Giao di·ªán Streamlit ---
st.title("·ª®ng d·ª•ng ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh üìà")
st.markdown("S·ª≠ d·ª•ng AI ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng s·ªë v√† t√≠nh to√°n hi·ªáu qu·∫£ d·ª± √°n.")

# L·∫•y API Key t·ª´ Streamlit Secrets
api_key = st.secrets.get("GEMINI_API_KEY")

if not api_key:
    st.error("‚ö†Ô∏è **L·ªói C·∫•u h√¨nh:** Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets.")

# V√πng nh·∫≠p li·ªáu ph∆∞∆°ng √°n kinh doanh
st.subheader("1. Nh·∫≠p Ph∆∞∆°ng √°n Kinh doanh (D√°n n·ªôi dung t·ª´ file Word)")
project_text = st.text_area(
    "D√°n to√†n b·ªô n·ªôi dung ph∆∞∆°ng √°n kinh doanh v√†o ƒë√¢y. ƒê·∫£m b·∫£o c√≥ ƒë·ªß 6 th√¥ng s·ªë: V·ªën ƒë·∫ßu t∆∞, D√≤ng ƒë·ªùi d·ª± √°n, Doanh thu, Chi ph√≠, WACC, Thu·∫ø.",
    height=400,
    value="T·ªïng v·ªën ƒë·∫ßu t∆∞ l√† 30 t·ª∑. D·ª± √°n k√©o d√†i 10 nƒÉm. M·ªói nƒÉm t·∫°o ra 3.5 t·ª∑ doanh thu v√† 2 t·ª∑ chi ph√≠. WACC c·ªßa doanh nghi·ªáp l√† 13% v√† thu·∫ø su·∫•t l√† 20%."
)

# State ƒë·ªÉ l∆∞u tr·ªØ tham s·ªë ƒë√£ l·ªçc
if 'params' not in st.session_state:
    st.session_state['params'] = None
    
# N√∫t L·ªçc D·ªØ li·ªáu
if st.button("L·ªçc D·ªØ li·ªáu T√†i ch√≠nh (AI) ü§ñ", disabled=not api_key or not project_text):
    if api_key and project_text:
        with st.spinner('AI ƒëang ƒë·ªçc v√† tr√≠ch xu·∫•t d·ªØ li·ªáu...'):
            params = extract_financial_parameters(project_text, api_key)
            if params:
                st.session_state['params'] = params
                st.success("Tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!")

# --- Hi·ªÉn th·ªã v√† T√≠nh to√°n ---
if st.session_state['params']:
    params = st.session_state['params']
    
    st.markdown("---")
    st.subheader("2. D·ªØ li·ªáu T√†i ch√≠nh ƒê√£ L·ªçc")
    
    # Hi·ªÉn th·ªã c√°c tham s·ªë ƒë√£ l·ªçc d∆∞·ªõi d·∫°ng Metrics
    col1, col2, col3 = st.columns(3)
    col4, col5, col6 = st.columns(3)
    
    # Chuy·ªÉn ƒë·ªïi c√°c gi√° tr·ªã s·ªë ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp
    display_wacc = f"{params['WACC'] * 100:.2f}%"
    display_thue = f"{params['Thu·∫ø'] * 100:.0f}%"
    
    col1.metric("V·ªën ƒë·∫ßu t∆∞ (C0)", f"{params['V·ªën ƒë·∫ßu t∆∞']:,.0f} VNƒê")
    col2.metric("D√≤ng ƒë·ªùi d·ª± √°n (N)", f"{params['D√≤ng ƒë·ªùi d·ª± √°n']} nƒÉm")
    col3.metric("WACC (k)", display_wacc)
    col4.metric("Doanh thu/nƒÉm", f"{params['Doanh thu']:,.0f} VNƒê")
    col5.metric("Chi ph√≠/nƒÉm", f"{params['Chi ph√≠']:,.0f} VNƒê")
    col6.metric("Thu·∫ø su·∫•t", display_thue)
    
    
    # 3. X√¢y d·ª±ng B·∫£ng D√≤ng ti·ªÅn & T√≠nh to√°n Ch·ªâ s·ªë
    df_cashflow, results = calculate_project_metrics(params)
    
    st.markdown("---")
    st.subheader("3. B·∫£ng D√≤ng ti·ªÅn D·ª± √°n")
    st.dataframe(df_cashflow.style.format({
        'D√≤ng ti·ªÅn thu·∫ßn (CF)': '{:,.0f}',
        'H·ªá s·ªë chi·∫øt kh·∫•u': '{:.4f}',
        'D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)': '{:,.0f}'
    }), use_container_width=True)
    
    st.markdown("---")
    st.subheader("4. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")
    
    col_npv, col_irr, col_pp, col_dpp = st.columns(4)
    
    # Hi·ªÉn th·ªã NPV
    npv_value = f"{results['NPV']:,.0f} VNƒê"
    npv_delta = "D·ª± √°n kh·∫£ thi" if results['NPV'] > 0 else "D·ª± √°n kh√¥ng kh·∫£ thi"
    col_npv.metric("NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)", npv_value, delta=npv_delta)

    # Hi·ªÉn th·ªã IRR
    irr_value = f"{results['IRR'] * 100:.2f}%" if not np.isnan(results['IRR']) else "N/A"
    irr_delta = f"WACC: {results['WACC'] * 100:.2f}%"
    col_irr.metric("IRR (T·ª∑ su·∫•t ho√†n v·ªën n·ªôi b·ªô)", irr_value, delta=irr_delta)
    
    # Hi·ªÉn th·ªã PP
    pp_value = f"{results['PP']:.2f} nƒÉm"
    col_pp.metric("PP (Th·ªùi gian ho√†n v·ªën)", pp_value)
    
    # Hi·ªÉn th·ªã DPP
    dpp_value = f"{results['DPP']:.2f} nƒÉm"
    col_dpp.metric("DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)", dpp_value)
    
    # 5. Ph√¢n t√≠ch AI
    st.markdown("---")
    st.subheader("5. Ph√¢n t√≠ch Ch·ªâ s·ªë Hi·ªáu qu·∫£ (AI)")

    if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch Ch·ªâ s·ªë üß†", disabled=not api_key):
        with st.spinner('ƒêang g·ª≠i k·∫øt qu·∫£ v√† ch·ªù Gemini ph√¢n t√≠ch...'):
            ai_analysis = get_ai_analysis(results, df_cashflow, api_key)
            st.info(ai_analysis)
